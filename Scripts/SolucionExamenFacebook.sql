/*1. Consultar la cantidad de likes por publicación*/

select A.CODIGO_PUBLICACION,B.CONTENIDO_PUBLICACION, COUNT(*) AS CANTIDAD_LIKES
from TBL_LIKE_PUBLICACIONES A
INNER JOIN TBL_PUBLICACIONES B
ON (A.CODIGO_PUBLICACION = B.CODIGO_PUBLICACION)
GROUP BY A.CODIGO_PUBLICACION,B.CONTENIDO_PUBLICACION;


/*2. Consultar la cantidad de likes por fotografía.*/
SELECT CODIGO_FOTO, COUNT(*) CANTIDAD_LIKES
FROM TBL_LIKE_FOTOGRAFIAS
GROUP BY CODIGO_FOTO;

/*
3. Consultar los grupos en los cuales la cantidad de usuarios sea mayor que 5, mostrar el nombre del grupo y la
cantidad de usuarios.
*/
SELECT *
FROM TBL_GRUPOS;

SELECT B.NOMBRE_GRUPO, COUNT(*) CANTIDAD_USUARIOS
FROM TBL_GRUPOS_X_USUARIO A
INNER JOIN TBL_GRUPOS B
ON (A.CODIGO_GRUPO = B.CODIGO_GRUPO)
GROUP BY B.NOMBRE_GRUPO
HAVING COUNT(*)>5;





/*
. Mostrar la cantidad de amistades pendientes y rechazadas.
*/

SELECT *
  FROM TBL_AMIGOS;

SELECT *
  FROM TBL_USUARIOS;


SELECT B.NOMBRE_ESTATUS, COUNT(1) CANTIDAD_AMISTADES
  FROM TBL_AMIGOS A
INNER JOIN TBL_ESTATUS_SOLICITUDES B
    ON (A.CODIGO_ESTATUS = B.CODIGO_ESTATUS)
WHERE A.CODIGO_ESTATUS IN (2,3)
GROUP BY B.NOMBRE_ESTATUS;


/*
Mostrar el usuario con mayor cantidad de amigos confirmados (El más cool).
*/

--Solucion 1: Retornara unicamente un registro, el primero utilizando un rownum = 1.
--Esta consulta no funcionaria bien en un dado caso existan varios usuarios
-- con la misma cantidad de amistades confirmadas y sean las maximas.
SELECT ROWNUM, CODIGO_USUARIO, NOMBRE_USUARIO, SOLICITUDES_CONFIRMADAS
  FROM (
    SELECT
      A.CODIGO_USUARIO,
      B.NOMBRE_USUARIO,
      COUNT(*) AS SOLICITUDES_CONFIRMADAS
    FROM TBL_AMIGOS A
      INNER JOIN TBL_USUARIOS B
        ON (A.CODIGO_USUARIO = B.CODIGO_USUARIO)
    WHERE CODIGO_ESTATUS = 1
    GROUP BY A.CODIGO_USUARIO, B.NOMBRE_USUARIO
    ORDER BY SOLICITUDES_CONFIRMADAS DESC
  )
WHERE ROWNUM = 1;


--Obtener la cantidad máxima de solicitudes confirmadas: OJO esto no es solucion,
--aqui solo retorna la cantidad, no quien es el usuario.
SELECT MAX(SOLICITUDES_CONFIRMADAS)
  FROM (
    SELECT
      CODIGO_USUARIO,
      COUNT(*) SOLICITUDES_CONFIRMADAS
    FROM TBL_AMIGOS
    WHERE CODIGO_ESTATUS = 1
    GROUP BY CODIGO_USUARIO
  );


--Solucion 2: Este si retorna todos los usuarios que si tengan la cantidad máxima.
SELECT B.NOMBRE_USUARIO, COUNT(*) SOLICITUDES_CONFIRMADAS
  FROM TBL_AMIGOS A
    INNER JOIN TBL_USUARIOS B
    ON (A.CODIGO_USUARIO = B.CODIGO_USUARIO)
WHERE CODIGO_ESTATUS = 1
GROUP BY B.NOMBRE_USUARIO
HAVING COUNT(*) = (
  SELECT MAX(SOLICITUDES_CONFIRMADAS)
  FROM (
    SELECT
      CODIGO_USUARIO,
      COUNT(*) SOLICITUDES_CONFIRMADAS
    FROM TBL_AMIGOS
    WHERE CODIGO_ESTATUS = 1
    GROUP BY CODIGO_USUARIO
  )
);


/*6. Mostrar el usuario con más solicitudes rechazadas (Forever alone).
*/

SELECT B.NOMBRE_USUARIO, COUNT(*) SOLICITUDES_RECHAZADAS
  FROM TBL_AMIGOS A
    INNER JOIN TBL_USUARIOS B
    ON (A.CODIGO_USUARIO = B.CODIGO_USUARIO)
WHERE CODIGO_ESTATUS = 2
GROUP BY B.NOMBRE_USUARIO
HAVING COUNT(*) = (
  SELECT MAX(SOLICITUDES_RECHAZADAS)
  FROM (
    SELECT
      CODIGO_USUARIO,
      COUNT(*) SOLICITUDES_RECHAZADAS
    FROM TBL_AMIGOS
    WHERE CODIGO_ESTATUS = 2
    GROUP BY CODIGO_USUARIO
  )
);

--7. Mostrar la cantidad de usuarios registrados mensualmente.
SELECT TO_CHAR(FECHA_REGISTRO,'YYYY-MM') MES, COUNT(*) CANTIDAD_USUARIOS
  FROM TBL_USUARIOS
  GROUP BY TO_CHAR(FECHA_REGISTRO,'YYYY-MM')
ORDER BY MES;

--EXTRAER EL AÑO Y EL MES:
SELECT TO_CHAR(SYSDATE,'YYYY-MM')
  FROM DUAL;


---8. Mostrar la edad promedio de los usuarios por género.
SELECT GENERO_USUARIO, ROUND(AVG(EDAD),2) EDAD_PROMEDIO
  FROM TBL_USUARIOS
GROUP BY GENERO_USUARIO;


/*
Con respecto al historial de accesos se necesita saber el crecimiento de los accesos del día 19 de Agosto del 2015
con respecto al día anterior, la fórmula para calcular dicho crecimiento se muestra a continuación:
((b-a)/a) * 100
Donde:
a = Cantidad de accesos del día anterior (18 de Agosto del 2015)
b = Cantidad de accesos del día actual (19 de Agosto del 2015)
Mostrar el resultado como un porcentaje (Concatenar %)
*/
--ACCCESOS DEL DIA ACTUAL
SELECT COUNT(*) ACCESOS_DIA_ACTUAL
  FROM TBL_HISTORIAL_ACCESOS
WHERE TRUNC(FECHA_HORA_ACCESO) = TO_DATE('19/08/2015','DD/MM/YYYY');


--NOTA: ES NECESARIO UTILIZAR LA FUNCION TRUNC PARA QUITAR LA HORA Y HACER LA COMPARACION CORRECTAMENTE.
--EJEMPLO DE LA DIFERENCIA:
SELECT FECHA_HORA_ACCESO, TRUNC(FECHA_HORA_ACCESO)
  FROM TBL_HISTORIAL_ACCESOS;

--ACCCESOS DEL DIA ANTERIOR
SELECT COUNT(*) ACCESOS_DIA_ANTERIOR
  FROM TBL_HISTORIAL_ACCESOS
WHERE TRUNC(FECHA_HORA_ACCESO) = TO_DATE('18/08/2015','DD/MM/YYYY');


a= Dia anterior 2
b= Dia actual 6

--SOLUCION APLICANDO SUSTITUCION POR SUBCONSULTAS EN LA FORMULA
SELECT ((
          (
            SELECT COUNT(*) ACCESOS_DIA_ACTUAL
              FROM TBL_HISTORIAL_ACCESOS
            WHERE TRUNC(FECHA_HORA_ACCESO) = TO_DATE('19/08/2015','DD/MM/YYYY'
          ))-
          (
            SELECT COUNT(*) ACCESOS_DIA_ANTERIOR
              FROM TBL_HISTORIAL_ACCESOS
            WHERE TRUNC(FECHA_HORA_ACCESO) = TO_DATE('18/08/2015','DD/MM/YYYY')
          ))/(
            SELECT COUNT(*) ACCESOS_DIA_ANTERIOR
              FROM TBL_HISTORIAL_ACCESOS
            WHERE TRUNC(FECHA_HORA_ACCESO) = TO_DATE('18/08/2015','DD/MM/YYYY')
          )) * 100 ||'%' AS CRECIMIENTO
  FROM dual;


--SOLUCION APLICANDO UN PRODUCTO CARTESIANO Y LUEGO APLICAR LA FORMULA.
SELECT ((B.ACCESOS_DIA_ACTUAL-a.ACCESOS_DIA_ANTERIOR)/a.ACCESOS_DIA_ANTERIOR) * 100||'%' AS CRECIMIENTO
  FROM (
      SELECT COUNT(*) ACCESOS_DIA_ACTUAL
        FROM TBL_HISTORIAL_ACCESOS
      WHERE TRUNC(FECHA_HORA_ACCESO) = TO_DATE('19/08/2015','DD/MM/YYYY')
    ) B,
    (
      SELECT COUNT(*) ACCESOS_DIA_ANTERIOR
      FROM TBL_HISTORIAL_ACCESOS
      WHERE TRUNC(FECHA_HORA_ACCESO) = TO_DATE('18/08/2015', 'DD/MM/YYYY')
      ) A;

---ORGANIZANDO LAS SUBCONSULTAS CON WITH, EL RESULTADO ES EL MISMO, SOLO DA MÁS ORDEN.
WITH A AS (
  SELECT COUNT(*) ACCESOS_DIA_ANTERIOR
      FROM TBL_HISTORIAL_ACCESOS
      WHERE TRUNC(FECHA_HORA_ACCESO) = TO_DATE('18/08/2015', 'DD/MM/YYYY')
),
B AS (
    SELECT COUNT(*) ACCESOS_DIA_ACTUAL
        FROM TBL_HISTORIAL_ACCESOS
      WHERE TRUNC(FECHA_HORA_ACCESO) = TO_DATE('19/08/2015','DD/MM/YYYY')
)
SELECT ((B.ACCESOS_DIA_ACTUAL-A.ACCESOS_DIA_ANTERIOR)/A.ACCESOS_DIA_ANTERIOR) * 100||'%' AS CRECIMIENTO
  FROM A,B;


--RECUERDEN, ESTE ES UN PRODUCTO CARTESIANO
SELECT *
  FROM A,B;



---Ejercicio esporadico:
--Mostrar todos los accesos del año 2015
SELECT *
  FROM TBL_HISTORIAL_ACCESOS
    WHERE FECHA_HORA_ACCESO = to_date('12/12/2012','DD/MM/YYYY');


/*
10. Crear una consulta que muestre lo siguiente:
 Nombre del usuario.
 País donde pertenece.
 Cantidad de publicaciones que tiene.
 Cantidad de amigos confirmados.
 Cantidad de likes que ha dado.
 Cantidad de fotos en las que ha sido etiquetado.
 Cantidad de accesos en el historial.
*/

SELECT  A.*,
        NVL(B.CANTIDAD_AMIGOS,0) AS CANTIDAD_AMIGOS,
        NVL(C.LIKES_FOTOGRAFIAS, 0) AS LIKES_FOTOGRAFIAS,
        NVL(D.LIKES_PUBLICACIONES,0) AS LIKES_PUBLICACIONES,
        NVL(C.LIKES_FOTOGRAFIAS,0) + NVL(D.LIKES_PUBLICACIONES,0) AS TOTAL_LIKES,
        NVL(E.CANTIDAD_ETIQUETAS,0) AS CANTIDAD_ETIQUETAS,
        NVL(F.CANTIDAD_ACCESOS,0) AS CANTIDAD_ACCESOS
  FROM (
    SELECT
      A.CODIGO_USUARIO,
      A.NOMBRE_USUARIO,
      B.NOMBRE_PAIS,
      COUNT(C.CODIGO_USUARIO) AS CANTIDAD_PUBLICACIONES
    FROM TBL_USUARIOS A
      LEFT JOIN TBL_PAISES B
        ON (A.CODIGO_PAIS = B.CODIGO_PAIS)
      LEFT JOIN TBL_PUBLICACIONES C
        ON (A.CODIGO_USUARIO = C.CODIGO_USUARIO)
    GROUP BY A.CODIGO_USUARIO, A.NOMBRE_USUARIO, B.NOMBRE_PAIS
    ORDER BY A.CODIGO_USUARIO
  ) A
LEFT JOIN (
      SELECT
        CODIGO_USUARIO,
        COUNT(*) AS CANTIDAD_AMIGOS
      FROM TBL_AMIGOS
      WHERE CODIGO_ESTATUS = 1
      GROUP BY CODIGO_USUARIO
      ) B
  ON (A.CODIGO_USUARIO = B.CODIGO_USUARIO)
  LEFT JOIN (
      SELECT
        CODIGO_USUARIO,
        COUNT(*) AS LIKES_FOTOGRAFIAS
      FROM TBL_LIKE_FOTOGRAFIAS
      GROUP BY CODIGO_USUARIO
      ) C
  ON (A.CODIGO_USUARIO = C.CODIGO_USUARIO)
  LEFT JOIN (
      SELECT
        CODIGO_USUARIO,
        COUNT(*) AS LIKES_PUBLICACIONES
      FROM TBL_LIKE_PUBLICACIONES
      GROUP BY CODIGO_USUARIO
      ) D
    ON (A.CODIGO_USUARIO = D.CODIGO_USUARIO)
  LEFT JOIN (
      SELECT
        CODIGO_USUARIO,
        COUNT(*) CANTIDAD_ETIQUETAS
      FROM TBL_ETIQUETA_FOTOGRAFIAS
      GROUP BY CODIGO_USUARIO
      ) E
    ON (A.CODIGO_USUARIO = E.CODIGO_USUARIO)
  LEFT JOIN (
      SELECT
        CODIGO_USUARIO,
        COUNT(*) CANTIDAD_ACCESOS
      FROM TBL_HISTORIAL_ACCESOS
      GROUP BY CODIGO_USUARIO
      ) F
    ON (A.CODIGO_USUARIO = F.CODIGO_USUARIO)
ORDER BY A.CODIGO_USUARIO;

SELECT CODIGO_USUARIO, COUNT(*) CANTIDAD_ACCESOS
  FROM TBL_HISTORIAL_ACCESOS
GROUP BY CODIGO_USUARIO;




SELECT replace(to_char(to_date('12/11/2012','MM/DD/YYYY'),'YYYY-MM-DD'),'/','*') as resultado
  FROM dual;


SELECT *
  FROM  A, B
  WHERE A.LLAVE = B.LLAVE;

SELECT *
  FROM A, B
WHERE A.LLAVE = B.LLAVE(+);

SELECT *
  FROM A, B;
WHERE A.LLAVE(+) = B.LLAVE;


SELECT RPAD(INITCAP(RTRIM('   HOLA JUAN')),15,'X')
  FROM DUAL;


SELECT B.NOMBRE_GRUPO, COUNT(*) CANTIDAD_USUARIOS
FROM TBL_GRUPOS_X_USUARIO A
INNER JOIN TBL_GRUPOS B
ON (A.CODIGO_GRUPO = B.CODIGO_GRUPO)
  WHERE CANTIDAD_USUARIOS > 5
GROUP BY B.NOMBRE_GRUPO
ORDER BY CANTIDAD_USUARIOS DESC;